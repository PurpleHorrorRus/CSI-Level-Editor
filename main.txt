import javax.swing.JOptionPane;

import net.slashie.libjcsi.*;
import net.slashie.libjcsi.wswing.WSwingConsoleInterface;

public class App {
	private ConsoleSystemInterface csi = new WSwingConsoleInterface("First Roguelike");
	private int a = 0, b = 0, s = 1;
	private int x = 19, y = 5;
	private int startx = x, starty = y;
	private boolean checked = false;
	public static void main(String[] args){
		new App().run();
	}
	public void options(){
		csi.cls();
		csi.print(0, 0, "Here settings. To change the values on the arrows!", CSIColor.RED);
		csi.saveBuffer();
		boolean die = false;
		while(!die){
			csi.restore();
			csi.print(1, 1, "Speed (Max: 7): "+s, CSIColor.YELLOW);
			csi.refresh();
			int key = csi.inkey().code;
			switch(key){
			case CharKey.RARROW:
				if(s >= 0 && s < 7){
					s++;
					break;
				}
			case CharKey.LARROW:
				if(s > 0){
					s--;
					break;
				}
			case CharKey.ESC:
				normal();
			}
		}
	}
	public void check(){
		x = startx; y = starty;
		String winorlose;
		if(!checked){ winorlose = "You Win!"; } else { winorlose = "You Lose!"; }
		JOptionPane.showMessageDialog(null, winorlose, "by Nikiforoff.tk", JOptionPane.INFORMATION_MESSAGE);
		normal();
	}
	public void newGame(){
		csi.cls();
		buildLevel();
		csi.saveBuffer();
		boolean die = false;
		while(!die){
			
			csi.restore();
			csi.refresh();
			csi.print(x, y, "П", CSIColor.YELLOW);
			int key = csi.inkey().code;
			switch(key){
			case CharKey.A: case CharKey.a:
				if(x-s > 0){
					x -= s;
					if(csi.peekChar(x, y) == ' ' && csi.peekChar(x, y-1) == '0' && (csi.peekChar(x-1, y) == '0' || csi.peekChar(x+1, y) == '0')){
						y-=2;
						break;
					}
					if(csi.peekChar(x, y) == '0'){ //The diagonal motion
						y -= 1;
						break;
					}
						try{
							while(csi.peekChar(x, y+1) != '0'){
								y+=1;
							}
						} catch(ArrayIndexOutOfBoundsException es) { checked = true; check(); }
					
				}
					
				if(x-s > 0 && csi.peekChar(x-s, y) != '0'){ 
					break;
				}
				else{ x+=0; break; }
				
			case CharKey.D: case CharKey.d:
				if(x+s < 79){
					if(x+s >= 78) { checked = false; check(); break; }
					x+=s;
					if(csi.peekChar(x, y) == '0'){ //The diagonal motion for
						y-=1;
						break;
					}
					if(csi.peekChar(x+1, y+1) == ' '){
						try{
							while(csi.peekChar(x, y+1) != '0'){
								y+=1;
							}
							
						} catch(ArrayIndexOutOfBoundsException es) { checked = true; check(); }
						
					}
					break;
				}
				else{ x+=0; break; }
			case CharKey.ESC:
				x = startx; y = starty;
				normal();
			}
		}
	}
	public void normal(){
		csi.cls();
		csi.print(1, 0, "New Game", CSIColor.WHITE);
		csi.print(1, 1, "Options", CSIColor.WHITE);
		csi.print(1, 2, "Exit", CSIColor.WHITE);
		csi.saveBuffer();
		boolean exit = false;
		while(!exit){
			csi.restore();
			csi.print(a, b, "@", CSIColor.WHITE);
			csi.refresh();
			int key = csi.inkey().code;
			switch(key){
			case CharKey.W: case CharKey.w:
				if(b > 0){
					b--;
					break;
				}
			case CharKey.S: case CharKey.s:
				if(b < 2){
					b++;
					break;
				}			
			case CharKey.SPACE:
				if(b == 0){
					newGame();
				}
				if(b == 1){
					options();
				}
				if(b == 2){
					System.exit(0);
				}
			}
		}
	}
	public void run () {
		normal();
	}